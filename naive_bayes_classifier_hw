{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Kathryn Monopoli\n",
    "#### Artificial Intelligence (CS 534) - Assignment 4 \n",
    "\n",
    "\n",
    "# Naive Bayes Classifier\n",
    "\n",
    "a) You should implement from scratch a Naïve Bayes classifier (using the spam filter example discussed in class). \n",
    "* Also implement Laplacian smoothing to handle words not in the dictionary.\n",
    "\n",
    "b) Using the implemented algorithm, train and test the model for each dataset.\n",
    "* Use 80% of each class data to train your classifier and the remaining 20% to test it. \n",
    "* Which dataset provides better classification i.e. email body or email subject?\n",
    "\n",
    "c) Compare your classifier with the scikit-learn implementation (sklearn.naive_bayes.MultinomialNB).\n",
    "* Repeat the analysis from (b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## a) Implement from scratch a Naïve Bayes classifier\n",
    "* Also implement Laplacian smoothing to handle words not in the dictionary.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Methods for training the model\n",
    "import numpy as np\n",
    "import random\n",
    "import string\n",
    "\n",
    "def train_spam_filter(df,k):\n",
    "    '''Trains the spam filter from a set of Spam and Ham words.\n",
    "        Implements Laplacian smoothing to consider cases where the word is not present\n",
    "        in the original messages.\n",
    "    \n",
    "    parameters:\n",
    "        df: dataframe of words where each column represents a word and each row represents an email \n",
    "        k: float tunable parameter for Laplacian smoothing \n",
    "    returns:\n",
    "        p_ham_dict: dictionary containing words and their probability that those words are in a ham email\n",
    "        p_spam_dict: dictionary containing words and their probability that those words are in a spam email\n",
    "        missing_key: String representing the key in the dictionaries for any missing words - allows implementation of Laplacian smoothing for missing words\n",
    "    '''\n",
    "    prob_ham_dict = dict()\n",
    "    prob_spam_dict = dict()\n",
    "\n",
    "    # total number of words that are in ham emails\n",
    "    num_words_ham = df[df['CLASS'] == 1][df.columns[:-1]].values.sum()\n",
    "    # total number of words that are in spam emails\n",
    "    num_words_spam = df[df['CLASS'] == 0][df.columns[:-1]].values.sum()\n",
    "    # size of vocabulary\n",
    "    sz_voc = len(df.columns)-1 # subtract 1 because 'CLASS' column is not part of the vocabulary\n",
    "    \n",
    "    print(\"Number of ham words:\",num_words_ham)\n",
    "    print(\"Number of spam words:\",num_words_spam)\n",
    "    print(\"Vocabulary size:\",sz_voc,\"\\n\")\n",
    "    \n",
    "    for w in df.columns[:-1]: # Exclude last column from iteration ('CLASS')\n",
    "        # count occurences of w in spam\n",
    "        num_w_spam = df[df['CLASS'] == 0][w].values.sum() \n",
    "        # compute the conditional probability - that the word w is in spam email\n",
    "        prob_w_spam = (float(num_w_spam) + k)/(float(num_words_spam) + k*sz_voc) \n",
    "        # count occurences of w in ham\n",
    "        num_w_ham = df[df['CLASS'] == 1][w].values.sum() \n",
    "        # compute the conditional probability - that the word w is in ham email\n",
    "        prob_w_ham = (float(num_w_ham) + k)/(float(num_words_ham) + k*sz_voc) \n",
    "        # add probability of w being ham/spam to dictionaries\n",
    "        prob_ham_dict[w] = prob_w_ham\n",
    "        prob_spam_dict[w] = prob_w_spam\n",
    "\n",
    "    # add additional term to the dictionary to account for missing values \n",
    "    missing_key = 'missing_word'\n",
    "    # make sure this word doesn't already exist in the dictionary\n",
    "    try: # only completes this try block of code if the missing world already exists in the dictionary (because for some reason it showed up in a training example email message)\n",
    "        prob_ham_dict[missing_key] # only have to check one of the dictionaries because they both contain the same words\n",
    "        # if word already exists then append a random set of characters to it to make it unique\n",
    "        missing_key+='_'+get_random_string(20)\n",
    "        print(\"Key existed so new missing_key is:\",missing_key)\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "    prob_missing_word_ham = (k)/(float(num_words_ham) + k*sz_voc) \n",
    "    prob_missing_word_spam = (k)/(float(num_words_spam) + k*sz_voc) \n",
    "    prob_ham_dict[missing_key] = prob_missing_word_ham\n",
    "    prob_spam_dict[missing_key] = prob_missing_word_spam\n",
    "    \n",
    "    return prob_ham_dict,prob_spam_dict,missing_key \n",
    "\n",
    "\n",
    "def get_random_string(length):\n",
    "    '''Generates a random string of lenght length'''\n",
    "    letters = string.ascii_lowercase\n",
    "    result_str = ''.join(random.choice(letters) for i in range(length))\n",
    "    return result_str\n",
    "\n",
    "\n",
    "\n",
    "def compute_priors(df):\n",
    "    '''Computes the prior probabilities than an email is ham or spam based off of the number of ham and spam emails in the training set\n",
    "    parameters:\n",
    "        df: dataframe of words where each column represents a word and each row represents an email \n",
    "    returns:\n",
    "        prior_ham float - the prior probability that an email is ham\n",
    "        prior_spam float - the prior probability that an email is spam\n",
    "    '''\n",
    "    prior_ham = (len(df[df['CLASS'] == 1]))/(len(df[df['CLASS'] == 1])+len(df[df['CLASS'] == 0]))\n",
    "    prior_spam = (len(df[df['CLASS'] == 0]))/(len(df[df['CLASS'] == 1])+len(df[df['CLASS'] == 0]))  \n",
    "    return prior_ham,prior_spam\n",
    "\n",
    "\n",
    "\n",
    "# Methods For assessing the model\n",
    "def compute_prob(prob_dict,prior,words,missing_key):\n",
    "    '''Computes the probability (of an email being spam or ham depending on the prob_dict passed in)\n",
    "        Considers each word occurence and independent event and then computes the probability by\n",
    "        multiplying the probabilities of each word in words based on its corresponding probability\n",
    "        value in prob_dict by each other and by the prior probability\n",
    "    parameters:\n",
    "        prob_dict dictionary containing words and their associated probabilities (as floats) of a particular event\n",
    "        prior: prior probability\n",
    "        words: list of Strings representing a single email\n",
    "        missing_key: String representing the key in the dictionaries for any missing words\n",
    "    returns:\n",
    "        probs: float between 0 and 1 representing probability of an event (email being ham or spam)\n",
    "    '''\n",
    "    probs = [prior]\n",
    "    for w in words:\n",
    "        try:\n",
    "            probs.append(prob_dict[w])\n",
    "        except: # case where word is missing - pre-computed to implement Laplacian smoothing\n",
    "            probs.append(prob_dict[missing_key])\n",
    "    probs = np.prod(probs)\n",
    "    return probs\n",
    "\n",
    "def predict_spam_email(words,p_ham_dict,p_spam_dict,prior_ham,prior_spam,missing_key):\n",
    "    '''Returns a prediction of a single email being ham or spam based on the model\n",
    "    parameters:\n",
    "        words: list of Strings representing words in a single email\n",
    "        p_ham_dict: dictionary containing words and their probability that those words are in a ham email\n",
    "        p_spam_dict: dictionary containing words and their probability that those words are in a spam email\n",
    "        prior_ham: prior probability that the email is ham\n",
    "        prior_spam: prior probability that the email is spam\n",
    "        missing_key: String representing the key in the dictionaries for any missing words\n",
    "    returns:\n",
    "        int 1 if ham 0 if spam\n",
    "    '''\n",
    "    import numpy as np\n",
    "    # remove \"CLASS\" if it is still there\n",
    "    words = [x for x in words if x!= 'CLASS']\n",
    "    prob_w_ham = compute_prob(p_ham_dict,prior_ham,words,missing_key)\n",
    "    prob_w_spam = compute_prob(p_spam_dict,prior_spam,words,missing_key)\n",
    "    # is spam\n",
    "    if prob_w_spam > prob_w_ham:\n",
    "        return 0\n",
    "    # is ham\n",
    "    else:\n",
    "        return 1\n",
    "\n",
    "def predict(df,missing_key):\n",
    "    '''Takes a dataframe of words and their occurences in emails and returns a list of 1's and 0's\n",
    "        reprsenting ham or spam prediction respectively for each email \n",
    "    parameters:\n",
    "        df: dataframe of words where each column represents a word and each row represents an email \n",
    "        missing_key: String representing the key in the dictionaries for any missing words\n",
    "    returns:\n",
    "        pred_ls: list of ints - 1's and 0's representing ham and spam predictions respectively\n",
    "                 The order of this list corresponds to the order of the emails in the dataframe\n",
    "    '''\n",
    "    # Iterate through each email in the dataset\n",
    "    pred_ls = []\n",
    "    for index, row in df.iterrows():\n",
    "        words = list(row[row >0].index)\n",
    "        # perform predictions for each email and store in a list\n",
    "        pred_ls.append(predict_spam_email(words,p_ham_dict,p_spam_dict,prior_ham,prior_spam,missing_key))\n",
    "    return pred_ls\n",
    "\n",
    "\n",
    "def plot_confusion_matrix_spam_classifier(actual,predicted,title):\n",
    "    '''Plots a confusion matrix for the spam email classifier\n",
    "    parameters:\n",
    "        predicted: list of ints 0's and 1's representing positive and negative predictions for the classes\n",
    "        actual: list of ints 0's and 1's representing positive and negative classes\n",
    "        title: String representing the title of the plot\n",
    "    '''\n",
    "    from sklearn.metrics import confusion_matrix\n",
    "    from matplotlib import pyplot as plt\n",
    "    from sklearn.metrics import ConfusionMatrixDisplay\n",
    "    import matplotlib\n",
    "    matplotlib.rcParams['font.sans-serif'] = \"Arial\" \n",
    "    matplotlib.rcParams['font.family'] = \"sans-serif\" \n",
    "    matplotlib.rcParams['font.size'] = 20\n",
    "\n",
    "    fig, ax = plt.subplots()\n",
    "    cm = confusion_matrix(actual,predicted)\n",
    "    tn, fp, fn, tp = cm.ravel()\n",
    "    disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=[\"Spam\",\"Ham\"])\n",
    "    disp.plot(cmap='GnBu',ax=ax)\n",
    "    ax.set_title(title)\n",
    "    plt.savefig(title.replace(\" \",\"_\")+\"_confusion_matrix.png\",dpi=300,bbox_inches=\"tight\",transparent=True)\n",
    "    \n",
    "def f_measure(actual,predicted):\n",
    "    '''compute f-measure from array of actual and predicted values'''\n",
    "    from sklearn.metrics import confusion_matrix\n",
    "    tn, fp, fn, tp = confusion_matrix(actual, predicted).ravel()\n",
    "    pre = tp/(tp+fp)\n",
    "    rec = tp/(tp+fn)\n",
    "    return (2*pre*rec)/(pre+rec)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## b) Using the implemented algorithm, train and test the model for each dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load in email dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>000euro</th>\n",
       "      <th>05102011</th>\n",
       "      <th>10th</th>\n",
       "      <th>11th</th>\n",
       "      <th>12noon</th>\n",
       "      <th>12th</th>\n",
       "      <th>13th</th>\n",
       "      <th>14th</th>\n",
       "      <th>15th</th>\n",
       "      <th>16th</th>\n",
       "      <th>...</th>\n",
       "      <th>znie</th>\n",
       "      <th>zurich</th>\n",
       "      <th>zürich</th>\n",
       "      <th>ètop</th>\n",
       "      <th>özsu</th>\n",
       "      <th>û37</th>\n",
       "      <th>û42</th>\n",
       "      <th>û46</th>\n",
       "      <th>û56</th>\n",
       "      <th>CLASS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 3722 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    000euro  05102011  10th  11th  12noon  12th  13th  14th  15th  16th  ...  \\\n",
       "0         0         0     0     0       0     0     0     0     0     0  ...   \n",
       "1         0         0     0     0       0     0     0     0     0     0  ...   \n",
       "2         0         0     0     0       0     0     0     0     0     0  ...   \n",
       "3         0         0     0     0       0     0     0     0     0     0  ...   \n",
       "4         0         0     0     0       0     0     0     0     0     0  ...   \n",
       "..      ...       ...   ...   ...     ...   ...   ...   ...   ...   ...  ...   \n",
       "59        0         0     0     0       0     0     0     0     0     0  ...   \n",
       "60        0         0     0     0       0     0     0     0     0     0  ...   \n",
       "61        0         0     0     0       0     0     0     0     0     0  ...   \n",
       "62        0         0     0     0       0     0     0     0     0     0  ...   \n",
       "63        0         0     0     0       0     0     0     0     0     0  ...   \n",
       "\n",
       "    znie  zurich  zürich  ètop  özsu  û37  û42  û46  û56  CLASS  \n",
       "0      0       0       0     0     0    0    0    0    0      0  \n",
       "1      0       1       0     0     0    0    0    0    0      0  \n",
       "2      0       0       0     0     0    0    0    0    0      0  \n",
       "3      0       0       0     0     0    0    0    0    0      0  \n",
       "4      0       0       0     0     0    0    0    0    0      0  \n",
       "..   ...     ...     ...   ...   ...  ...  ...  ...  ...    ...  \n",
       "59     0       0       0     0     0    0    0    0    0      1  \n",
       "60     0       0       0     0     0    0    0    0    0      0  \n",
       "61     0       0       0     0     0    0    0    0    0      0  \n",
       "62     0       0       0     0     0    0    0    0    0      0  \n",
       "63     0       0       0     0     0    0    0    0    0      0  \n",
       "\n",
       "[64 rows x 3722 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>10th</th>\n",
       "      <th>13th</th>\n",
       "      <th>1st</th>\n",
       "      <th>2nd</th>\n",
       "      <th>31st</th>\n",
       "      <th>3rd</th>\n",
       "      <th>5th</th>\n",
       "      <th>6th</th>\n",
       "      <th>abstract</th>\n",
       "      <th>academ</th>\n",
       "      <th>...</th>\n",
       "      <th>vacanc</th>\n",
       "      <th>valencia</th>\n",
       "      <th>vehicular</th>\n",
       "      <th>video</th>\n",
       "      <th>web</th>\n",
       "      <th>wireless</th>\n",
       "      <th>workflow</th>\n",
       "      <th>workshop</th>\n",
       "      <th>zurich</th>\n",
       "      <th>CLASS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 230 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    10th  13th  1st  2nd  31st  3rd  5th  6th  abstract  academ  ...  vacanc  \\\n",
       "0      0     0    0    0     0    0    0    0         0       0  ...       0   \n",
       "1      0     0    0    0     0    0    0    0         0       0  ...       0   \n",
       "2      0     0    0    0     0    0    0    0         0       0  ...       0   \n",
       "3      0     0    0    0     0    0    0    0         0       0  ...       1   \n",
       "4      0     0    0    0     0    0    0    0         0       0  ...       0   \n",
       "..   ...   ...  ...  ...   ...  ...  ...  ...       ...     ...  ...     ...   \n",
       "59     0     0    0    0     0    0    0    0         0       0  ...       0   \n",
       "60     0     0    0    0     0    0    0    0         0       0  ...       0   \n",
       "61     0     0    0    0     0    0    0    0         0       0  ...       0   \n",
       "62     0     0    0    1     0    0    0    0         0       0  ...       0   \n",
       "63     0     0    0    0     0    0    0    0         0       0  ...       0   \n",
       "\n",
       "    valencia  vehicular  video  web  wireless  workflow  workshop  zurich  \\\n",
       "0          0          0      0    0         0         0         0       0   \n",
       "1          0          0      0    0         0         0         0       1   \n",
       "2          0          0      0    0         0         0         0       0   \n",
       "3          0          0      1    0         0         0         0       0   \n",
       "4          0          0      0    0         0         0         0       0   \n",
       "..       ...        ...    ...  ...       ...       ...       ...     ...   \n",
       "59         0          0      0    1         0         0         0       0   \n",
       "60         0          0      0    1         0         0         0       0   \n",
       "61         0          0      0    0         0         0         0       0   \n",
       "62         0          0      0    0         0         0         0       0   \n",
       "63         0          0      0    0         0         0         0       0   \n",
       "\n",
       "    CLASS  \n",
       "0       0  \n",
       "1       0  \n",
       "2       0  \n",
       "3       0  \n",
       "4       0  \n",
       "..    ...  \n",
       "59      1  \n",
       "60      0  \n",
       "61      0  \n",
       "62      0  \n",
       "63      0  \n",
       "\n",
       "[64 rows x 230 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "# Email Bodies\n",
    "body_df = pd.read_csv('emails/dbworld_bodies_stemmed.csv')\n",
    "# Email Subjects\n",
    "subj_df = pd.read_csv('emails/dbworld_subjects_stemmed.csv')\n",
    "\n",
    "# drop id columns\n",
    "body_df.drop(columns = ['id'],inplace=True)\n",
    "subj_df.drop(columns = ['id'],inplace=True)\n",
    "\n",
    "display(body_df)\n",
    "display(subj_df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split data into training and testing datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29 Ham emails\n",
      "35 Spam emails\n",
      "Training set will have 23 ham emails and 28 spam emails\n",
      "Test set will have 6 ham emails and 7 spam emails\n"
     ]
    }
   ],
   "source": [
    "# Here we are splitting by the amount in each class, so we first need to determine the number of spam and ham emails in the training dataset\n",
    "# We assume the body and subject datasets represent the same messages so we can do these initial computations based on the body_df only\n",
    "\n",
    "test_p_sz = 0.2\n",
    "\n",
    "ham_ct = len(body_df[body_df['CLASS'] == 1])\n",
    "spam_ct = len(body_df[body_df['CLASS'] == 0])\n",
    "\n",
    "print(ham_ct, \"Ham emails\")\n",
    "print(spam_ct, \"Spam emails\")\n",
    "\n",
    "train_ham_sz = int(round((1-test_p_sz)*ham_ct,0))\n",
    "train_spam_sz = int(round((1-test_p_sz)*spam_ct,0))\n",
    "\n",
    "print(\"Training set will have\",train_ham_sz,\"ham emails and\",train_spam_sz,\"spam emails\")\n",
    "print(\"Test set will have\",ham_ct-train_ham_sz,\"ham emails and\",spam_ct-train_spam_sz,\"spam emails\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Subjects\n",
    "# subjects ham\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# subjects ham\n",
    "subj_df_train_ham, subj_df_test_ham, subj_class_train_ham, subj_class_test_ham = train_test_split(\n",
    "    subj_df[subj_df['CLASS'] == 1].drop(columns=['CLASS']),subj_df[subj_df['CLASS'] == 1]['CLASS'], test_size=test_p_sz)\n",
    "\n",
    "# subjects spam\n",
    "subj_df_train_spam, subj_df_test_spam, subj_class_train_spam, subj_class_test_spam = train_test_split(\n",
    "    subj_df[subj_df['CLASS'] == 0].drop(columns=['CLASS']),subj_df[subj_df['CLASS'] == 0]['CLASS'], test_size=test_p_sz)\n",
    "\n",
    "# compile subjects ham and spam\n",
    "subj_df_train = pd.concat([subj_df_train_spam,subj_df_train_ham])\n",
    "subj_class_train = pd.concat([subj_class_train_spam,subj_class_train_ham])\n",
    "subj_df_test = pd.concat([subj_df_test_spam,subj_df_test_ham])\n",
    "subj_class_test = pd.concat([subj_class_test_spam,subj_class_test_ham])\n",
    "\n",
    "# plot \n",
    "# subj_class_train.value_counts().plot(kind='bar', title = 'Subject Training Set')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Bodies\n",
    "# bodies ham\n",
    "body_df_train_ham, body_df_test_ham, body_class_train_ham, body_class_test_ham = train_test_split(\n",
    "    body_df[body_df['CLASS'] == 1].drop(columns=['CLASS']),body_df[body_df['CLASS'] == 1]['CLASS'], test_size=test_p_sz)\n",
    "\n",
    "# bodies spam\n",
    "body_df_train_spam, body_df_test_spam, body_class_train_spam, body_class_test_spam = train_test_split(\n",
    "    body_df[body_df['CLASS'] == 0].drop(columns=['CLASS']),body_df[body_df['CLASS'] == 0]['CLASS'], test_size=test_p_sz)\n",
    "\n",
    "# compile bodies ham and spam\n",
    "body_df_train = pd.concat([body_df_train_spam,body_df_train_ham])\n",
    "body_class_train = pd.concat([body_class_train_spam,body_class_train_ham])\n",
    "body_df_test = pd.concat([body_df_test_spam,body_df_test_ham])\n",
    "body_class_test = pd.concat([body_class_test_spam,body_class_test_ham])\n",
    "\n",
    "# plot \n",
    "# body_class_train.value_counts().plot(kind='bar', title = 'Body Training Set')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size body text: 51\n",
      "Test set size body text: 13\n",
      "Training set size subj text: 51\n",
      "Test set size subj text: 13\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Training set size body text:\",len(body_df_train))\n",
    "print(\"Test set size body text:\",len(body_df_test))\n",
    "print(\"Training set size subj text:\",len(subj_df_train))\n",
    "print(\"Test set size subj text:\",len(subj_df_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train the Model on Email Subjects\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training on Email Subjects:\n",
      "\n",
      "Prior probability is ham: 0.45098039215686275\n",
      "Prior probability is spam: 0.5490196078431373\n",
      "Number of ham words: 156\n",
      "Number of spam words: 167\n",
      "Vocabulary size: 229 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "subj_df_train['CLASS'] = subj_class_train\n",
    "\n",
    "print(\"Training on Email Subjects:\\n\")\n",
    "prior_ham,prior_spam = compute_priors(subj_df_train) \n",
    "print(\"Prior probability is ham:\",prior_ham)\n",
    "print(\"Prior probability is spam:\",prior_spam)\n",
    "\n",
    "# alpha for Laplacian smoothing\n",
    "alpha = 1.0\n",
    "\n",
    "p_ham_dict,p_spam_dict,missing_key = train_spam_filter(subj_df_train,alpha) \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assess the model on Email Subjects\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F-measure: 0.923076923076923\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# perform assessment - drop the class column for prediction\n",
    "predictions = predict(subj_df_test,missing_key) \n",
    "\n",
    "# Compute F-measure\n",
    "print(\"F-measure:\",f_measure(subj_class_test,predictions)) \n",
    "\n",
    "# Plot a Confusion Matrix to visualize model performance\n",
    "plot_confusion_matrix_spam_classifier(subj_class_test,predictions,'Assessment on Test Set\\nEmail Subjects') \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train the Model on Email Bodies\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training on Email Bodies:\n",
      "\n",
      "Prior probability is ham: 0.45098039215686275\n",
      "Prior probability is spam: 0.5490196078431373\n",
      "Number of ham words: 5381\n",
      "Number of spam words: 4232\n",
      "Vocabulary size: 3721 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "body_df_train['CLASS'] = body_class_train\n",
    "\n",
    "\n",
    "print(\"Training on Email Bodies:\\n\")\n",
    "prior_ham,prior_spam = compute_priors(body_df_train)\n",
    "print(\"Prior probability is ham:\",prior_ham)\n",
    "print(\"Prior probability is spam:\",prior_spam)\n",
    "# use same alpha as before for Laplacian smoothing\n",
    "p_ham_dict,p_spam_dict,missing_key = train_spam_filter(body_df_train,alpha)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assess the model on Email Bodies\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F-measure: 0.7058823529411764\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# perform assessment - drop the class column for prediction\n",
    "predictions = predict(body_df_test,missing_key) \n",
    "\n",
    "# Compute F-measure\n",
    "print(\"F-measure:\",f_measure(body_class_test,predictions)) \n",
    "\n",
    "# Plot a Confusion Matrix to visualize model performance\n",
    "plot_confusion_matrix_spam_classifier(body_class_test,predictions,'Assessment on Test Set\\nEmail Bodies') \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# c) Compare your classifier with the scikit-learn implementation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## On Email Subjects\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F-measure: 0.923076923076923\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "clf = MultinomialNB()\n",
    "try: # To account for case where the class column was added to the training data\n",
    "    clf.fit(subj_df_train.drop(columns=['CLASS']), subj_class_train)\n",
    "except:\n",
    "    clf.fit(subj_df_train, subj_class_train)\n",
    "    \n",
    "# perform assessment \n",
    "predictions_nb = clf.predict(subj_df_test)\n",
    "\n",
    "\n",
    "\n",
    "# Compute F-measure\n",
    "print(\"F-measure:\",f_measure(subj_class_test,predictions_nb))\n",
    "\n",
    "# Plot a Confusion Matrix to visualize model performance\n",
    "plot_confusion_matrix_spam_classifier(subj_class_test,predictions_nb,'Scikit-Learn Implementation\\nAssessment on Test Set\\nEmail Subjects')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## On Email Bodies\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F-measure: 0.8571428571428571\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "clf = MultinomialNB()\n",
    "try: # To account for case where the class column was added to the training data\n",
    "    clf.fit(body_df_train.drop(columns=['CLASS']), body_class_train)\n",
    "except:\n",
    "    clf.fit(body_df_train, body_class_train)\n",
    "    \n",
    "# perform assessment \n",
    "predictions_nb = clf.predict(body_df_test)\n",
    "\n",
    "\n",
    "\n",
    "# Compute F-measure\n",
    "print(\"F-measure:\",f_measure(body_class_test,predictions_nb))\n",
    "\n",
    "# Plot a Confusion Matrix to visualize model performance\n",
    "plot_confusion_matrix_spam_classifier(body_class_test,predictions_nb,'Scikit-Learn Implementation\\nAssessment on Test Set\\nEmail Bodies')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
